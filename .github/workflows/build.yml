name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  DOCKER_REGISTRY: amazon-ecr
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: justice-bid/frontend
  ECR_REPOSITORY_BACKEND: justice-bid/backend
  DOCKER_BUILDKIT: 1

jobs:
  lint_and_test_frontend:
    name: Lint and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
        
      - name: Run TypeScript type checking
        working-directory: frontend
        run: npm run type-check
        
      - name: Run unit tests
        working-directory: frontend
        run: npm test -- --coverage
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: frontend

  lint_and_test_backend:
    name: Lint and Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
          
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Pylint
        working-directory: backend
        run: pylint --rcfile=.pylintrc **/*.py
        
      - name: Run unit tests
        working-directory: backend
        run: pytest --cov=. --cov-report=xml
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend

  build_and_push_images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint_and_test_frontend, lint_and_test_backend]
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      frontend_image: ${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
      backend_image: ${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build_and_push_images]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Run Trivy vulnerability scanner on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build_and_push_images.outputs.registry }}/${{ needs.build_and_push_images.outputs.frontend_image }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Run Trivy vulnerability scanner on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build_and_push_images.outputs.registry }}/${{ needs.build_and_push_images.outputs.backend_image }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload frontend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-trivy'
          
      - name: Upload backend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-trivy'

  notify:
    name: Send Build Notification
    runs-on: ubuntu-latest
    needs: [lint_and_test_frontend, lint_and_test_backend, build_and_push_images, security_scan]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: builds
          SLACK_COLOR: ${{ (needs.lint_and_test_frontend.result == 'success' && needs.lint_and_test_backend.result == 'success' && needs.build_and_push_images.result == 'success' && (needs.security_scan.result == 'success' || needs.security_scan.result == 'skipped')) && 'good' || 'danger' }}
          SLACK_TITLE: Build Result
          SLACK_MESSAGE: |
            Build ${{ github.run_number }} for ${{ github.repository }}
            Commit: ${{ github.event.head_commit.message || github.ref }}
            Status: ${{ (needs.lint_and_test_frontend.result == 'success' && needs.lint_and_test_backend.result == 'success' && needs.build_and_push_images.result == 'success' && (needs.security_scan.result == 'success' || needs.security_scan.result == 'skipped')) && 'Passed ✅' || 'Failed ❌' }}